#!/usr/bin/env python3

import csv
import os
import sys
import datetime

"""
Class used to read and retrieve Hylogger scan dates from a CSV file
CSV file is generated by 'harvest.py' script in: https://gitlab.com/csiro-geoanalytics/auscope/tsg-harvest
"""
class TSGMeta:
    def __init__(self, csv_filename: str):
        """ Converts the CSV file into a dict, first column is NVCL id, second column date
        """
        self.dt_lkup = {}
        if os.path.exists(csv_filename):
            with open(csv_filename) as csvfile:
                tsg_reader = csv.reader(csvfile, delimiter='|')
                first = True
                for row in tsg_reader:
                    if first:
                        # Skip column labels in first row
                        first = False
                        continue
                    for col in row:
                        nvcl_id = row[8]
                        new_date = self.__str2date(row[2])
                        if new_date is None:
                            continue
                        # Is this NVCL id already in the dict?
                        if nvcl_id in self.dt_lkup:
                            lkup_date = self.dt_lkup[nvcl_id]
                            # Skip if new date is a duplicate or an older date
                            if new_date <= lkup_date:
                                continue
                        # Lookup table - associate borehole name <==> scan date
                        self.dt_lkup[nvcl_id] = new_date
        else:
            print(f"ERROR - Cannot find TSG metadata file: {csv_filename}")
            sys.exit(1)

    def __str2date(self, date_str) -> datetime.date:
        """ Converts date string to datetime.date object

        :param date_str: date string in '%Y-%m-%d %H:%M:%S' format
        :returns: datetime.date object
        """
        try:
            return datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S').date()
        except ValueError:
            return None

    def get_hl_scan_date(self, nvcl_id: str) -> datetime.date:
        """ Gets Hylogger scan date

        :param nvcl_id: NVCL id
        :returns: Hylogger scan date or None if it cannot be found
        """
        return self.dt_lkup.get(nvcl_id, None)
